You are given a sorted array 'arr' of positive integers of size 'n'.
It contains each number exactly twice except for one number, which occurs exactly once.
Find the number that occurs exactly once.

Sample Input 1:
arr=[1 1 2 2 3]
Sample Output 1:
3



\\BRUTE SOLUTION................................................................................................................................................................................................................................................

int getSingleElement(vector<int> &arr){
	// Write your code here.	
	int element;
	for(int i=0; i<arr.size(); i++){
		int element1=arr[i];
		element=element1;
		int count=0;
		
		for(int j=0;j<arr.size(); j++){
			if(arr[j]==arr[i]){
				count+=1;
			}
			else if(count==1){
				break;
			}
		}
		if(count==1){
			break;
		}
		
	}
	return element;
}





\\BETTER SOLUTION................................................................................................................................................................................................................................................

    int singleNumber(vector<int>& nums) {
       int n=nums[0];
       int element=0;

       for(int i=0; i<nums.size(); i++){
        n=max(n,nums[i]);
       }

       vector<int> hash(n+1,0);
        for(int i=0; i<nums.size(); i++){
            hash[nums[i]]+=1;
        }

        for(int i=0; i<hash.size(); i++){
            if(hash[i]==1){
                element=i;
                break;
            }
        }
       return element;
    }




\\ OPTIMAL SOLUTION............................................................................................................................................................................................................................................

    int singleNumber(vector<int>& nums) {
        int xorr=0;

        for(int i=0; i<nums.size(); i++){
            xorr=xorr ^ nums[i];
        }

        return xorr;
    }
