//BRUTE SOLUTION...................................................................................................................................
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        vector<int> arr;
        ListNode* mover=head;

        while(mover!=NULL){
            arr.push_back(mover->val);
            mover=mover->next;
        }

        arr.erase(arr.end()-n);

        if(arr.size()==0){
            return nullptr;
        }



        ListNode* top= new ListNode(arr[0]);
        ListNode* current=top;

        for(int i=1; i<arr.size(); i++){
            ListNode* temp= new ListNode(arr[i]);
            current->next=temp;
            current=temp;
        }

        return top;


        
    }

//BETTER SOLUTION..................................................................................................................................................................................................
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        int size=0;
        int i=0;
        ListNode* mover=head;

        while(mover!=NULL){
            size++;
            mover=mover->next;
        }
        if(size==0){
            return nullptr;
        }

        if(size==n){
            ListNode* newnode= head->next;
            delete head;
            return newnode;
        }

        mover=head;
        
        for (int i = 0; i < size - n - 1; i++) {
        mover = mover->next;
    }

    ListNode* nodeToRemove = mover->next;
    if (nodeToRemove) {
        mover->next = nodeToRemove->next;
        delete nodeToRemove;  
    }

        return head;
    }

//OPTIMAL SOLUTION..........................................................................................................................................................................................
    ListNode* removeNthFromEnd(ListNode* head, int n) {
   ListNode* dummy = new ListNode(0);
    dummy->next = head;
    ListNode* slow = dummy;
    ListNode* fast = dummy;

    // Move `fast` n + 1 steps ahead to create the right gap
    for (int i = 0; i <= n; i++) {
        fast = fast->next;
    }

    // Move both pointers until `fast` reaches the end
    while (fast != NULL) {
        fast = fast->next;
        slow = slow->next;
    }

    // `slow->next` is the node to delete
    ListNode* delNode = slow->next;
    slow->next = slow->next->next;
    delete delNode;

    // Return the head of the modified list
    ListNode* newHead = dummy->next;
    delete dummy;  // Clean up the dummy node
    return newHead;
}

